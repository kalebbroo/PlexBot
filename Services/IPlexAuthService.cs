namespace PlexBot.Services;

/// <summary>
/// Defines the contract for Plex authentication services.
/// This interface handles all operations related to authenticating with Plex servers,
/// managing authentication tokens, and maintaining secure connections.
/// </summary>
public interface IPlexAuthService
{
    /// <summary>
    /// Validates that a stored Plex access token is still valid.
    /// Performs a lightweight API call to verify the token's authenticity and permissions,
    /// which is useful for checking if a stored token needs to be refreshed before
    /// attempting more complex operations.
    /// </summary>
    /// <param name="accessToken">The Plex access token to verify</param>
    /// <param name="cancellationToken">Optional token to cancel the operation</param>
    /// <returns>True if the token is valid; otherwise, false</returns>
    Task<bool> VerifyStoredAccessTokenAsync(string accessToken, CancellationToken cancellationToken = default);

    /// <summary>
    /// Generates a PIN used for the Plex authentication flow.
    /// This is the first step in OAuth-style authentication with Plex, where a PIN
    /// is generated and then used to direct the user to the Plex authentication page.
    /// </summary>
    /// <param name="cancellationToken">Optional token to cancel the operation</param>
    /// <returns>
    /// A tuple containing the PIN ID (used to check authentication status) and
    /// the PIN code (displayed to or entered by the user)
    /// </returns>
    Task<(int pinId, string pinCode)> GeneratePinAsync(CancellationToken cancellationToken = default);

    /// <summary>
    /// Constructs the full Plex authentication URL for a user to authenticate.
    /// This URL is where users should be directed to login with their Plex credentials
    /// and authorize the application to access their Plex account.
    /// </summary>
    /// <param name="pinCode">The PIN code generated by <see cref="GeneratePinAsync"/></param>
    /// <param name="forwardUrl">The URL to forward to after successful authentication</param>
    /// <returns>The complete authentication URL to present to the user</returns>
    string ConstructAuthAppUrl(string pinCode, string forwardUrl);

    /// <summary>
    /// Checks if a PIN has been authenticated by the user.
    /// This method should be polled periodically after directing the user to the
    /// authentication URL until it returns a non-null access token.
    /// </summary>
    /// <param name="pinId">The PIN ID from <see cref="GeneratePinAsync"/></param>
    /// <param name="cancellationToken">Optional token to cancel the operation</param>
    /// <returns>
    /// The access token if authentication was successful; otherwise, null
    /// indicating that the user has not yet completed authentication
    /// </returns>
    Task<string?> CheckPinAsync(int pinId, CancellationToken cancellationToken = default);

    /// <summary>
    /// Gets a valid Plex access token, either from storage or by authenticating.
    /// This is a convenience method that handles the entire authentication flow:
    /// first checking stored credentials, then initiating the PIN/auth flow if needed,
    /// and finally storing the new token for future use.
    /// </summary>
    /// <param name="cancellationToken">Optional token to cancel the operation</param>
    /// <returns>A valid Plex access token</returns>
    /// <exception cref="AuthenticationException">
    /// Thrown when authentication fails or times out
    /// </exception>
    Task<string> GetAccessTokenAsync(CancellationToken cancellationToken = default);
}